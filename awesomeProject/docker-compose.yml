services:
  postgres:
    image: postgres:15
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d go_db" ]
      interval: 2s
      timeout: 2s
      retries: 30
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  migrator:
    image: flyway/flyway:11.8.1
    command: >
      -url=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      -user=${POSTGRES_USER}
      -password=${POSTGRES_PASSWORD}
      -locations=filesystem:/migrations
      -baselineOnMigrate=true
      migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations:ro
    environment:
      FLYWAY_CONNECT_RETRIES: "30"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: ${APP_DB_USER}
      DB_PASSWORD: ${APP_DB_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      HTTP_PORT: "8081"
      WEB_DIR: "/app/web"
      REDIS_ADDR: redis:6379
      REDIS_DB: "0"
      REDIS_PASSWORD: ""
      KAFKA_BROKERS: "kafka:9092"
      KAFKA_TOPIC: "orders"
      KAFKA_GROUP_ID: "order-consumer-1"
      KAFKA_START_OFFSET: "latest"
    ports:
      - "8081:8081"
    volumes:
      - ./web:/app/web:ro

  redis:
    image: redis:7-alpine
    command: [ "redis-server", "--appendonly", "yes" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 3s
      timeout: 3s
      retries: 30
    volumes:
      - redisdata:/data

  kafka:
    image: bitnami/kafka:3.7
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 30

volumes:
  pgdata:
  redisdata: